services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
    expose:
      - "5672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 2
    networks:
      - omniscient
  
  postgres_db_shard1: &postgres_db
    image: postgres:latest
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 60s
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=root
    networks:
      - omniscient
  
  postgres_db_shard2:
    <<: *postgres_db
    ports:
      - "5433:5432"
      
  cleaner-service:
    image: omniscient-cleaner-service
    environment:
      - RABBITMQ_HOST=rabbitmq
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://dotnet-aspire:18889
      - OTEL_RESOURCE_ATTRIBUTES=service.name=Omniscient.Cleaner
      - SERVICE_INSTANCE_ID={{.Service.Name}}.{{.Task.Slot}}.{{.Task.ID}}
      - WAIT_HOSTS=rabbitmq:5672
    networks:
      - omniscient
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - ./.enron-files:/app/.enron-files
    command: ["dotnet", "Omniscient.Cleaner.dll", "--init", "--path=/app/.enron-files/maildir" ]
  
  indexer-service-shard1: &indexer-service
    image: omniscient-indexer-service
    ports:
      - "8081:8081"
    environment:
      - ASPNETCORE_HTTP_PORTS=8081
      - RABBITMQ_HOST=rabbitmq
      - POSTGRES_CONNECTION_STRING=HOST=postgres_db_shard1;PORT=5432;DB=Omniscient;UID=root;PWD=password;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://dotnet-aspire:18889
      - OTEL_SERVICE_NAME=Omniscient.Indexer
      - SERVICE_INSTANCE_ID={{.Service.Name}}.{{.Task.Slot}}.{{.Task.ID}}
      - WAIT_HOSTS=rabbitmq:5672,postgres_db_shard1:5432
      - SENDER_START=A
      - SENDER_END=M
    networks:
      - omniscient
    deploy:
      restart_policy:
        condition: on-failure
      mode: replicated 
      replicas: 2
      
  indexer-service-shard2:
    <<: *indexer-service
    ports:
      - "8082:8081"
    environment:
      - ASPNETCORE_HTTP_PORTS=8081
      - RABBITMQ_HOST=rabbitmq
      - POSTGRES_CONNECTION_STRING=HOST=postgres_db_shard2;PORT=5432;DB=Omniscient;UID=root;PWD=password;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://dotnet-aspire:18889
      - OTEL_SERVICE_NAME=Omniscient.Indexer
      - SERVICE_INSTANCE_ID={{.Service.Name}}.{{.Task.Slot}}.{{.Task.ID}}
      - WAIT_HOSTS=rabbitmq:5672,postgres_db_shard2:5432
      - SENDER_START=N
      - SENDER_END=Z
  
  blazor-ui:
    image: omniscient-blazor-ui
    depends_on:
      - indexer-service
    ports:
      - "8080:8080"
    networks:
      - omniscient
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://dotnet-aspire:18889
      - OTEL_SERVICE_NAME=Omniscient.Web
      - INDEXER_BASE_ADDRESSES=http://indexer-service-shard1:8081/,http://indexer-service-shard2:8081/
      - SERVICE_INSTANCE_ID={{.Service.Name}}.{{.Task.Slot}}.{{.Task.ID}}
  
  dotnet-aspire:
    image:  mcr.microsoft.com/dotnet/aspire-dashboard:latest
    ports:
      - "18888:18888"
    expose:
      - "18889"
    networks:
      - omniscient
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-data:/prometheus
    networks:
      - omniscient

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - omniscient
    volumes:
      - ./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana-provisioning/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana-provisioning/dashboards:/var/lib/grafana/dashboards
      - ./grafana-data:/var/lib/grafana
    restart: unless-stopped
      
networks:
  omniscient: